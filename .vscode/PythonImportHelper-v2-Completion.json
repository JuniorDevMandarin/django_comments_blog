[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "dj_database_url",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dj_database_url",
        "description": "dj_database_url",
        "detail": "dj_database_url",
        "documentation": {}
    },
    {
        "label": "Env",
        "importPath": "environ",
        "description": "environ",
        "isExtraImport": true,
        "detail": "environ",
        "documentation": {}
    },
    {
        "label": "django_heroku",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django_heroku",
        "description": "django_heroku",
        "detail": "django_heroku",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "a_posts.views",
        "description": "a_posts.views",
        "isExtraImport": true,
        "detail": "a_posts.views",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "a_users.views",
        "description": "a_users.views",
        "isExtraImport": true,
        "detail": "a_users.views",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "a_inbox.views",
        "description": "a_inbox.views",
        "isExtraImport": true,
        "detail": "a_inbox.views",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "django.db",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db",
        "description": "django.db",
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "ModelForm",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "widgets",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "ModelForm",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "ModelForm",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timesince",
        "importPath": "django.utils.timesince",
        "description": "django.utils.timesince",
        "isExtraImport": true,
        "detail": "django.utils.timesince",
        "documentation": {}
    },
    {
        "label": "Fernet",
        "importPath": "cryptography.fernet",
        "description": "cryptography.fernet",
        "isExtraImport": true,
        "detail": "cryptography.fernet",
        "documentation": {}
    },
    {
        "label": "Fernet",
        "importPath": "cryptography.fernet",
        "description": "cryptography.fernet",
        "isExtraImport": true,
        "detail": "cryptography.fernet",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Profile",
        "importPath": "a_users.models",
        "description": "a_users.models",
        "isExtraImport": true,
        "detail": "a_users.models",
        "documentation": {}
    },
    {
        "label": "a_posts.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "a_posts.models",
        "description": "a_posts.models",
        "detail": "a_posts.models",
        "documentation": {}
    },
    {
        "label": "ckeditor.fields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ckeditor.fields",
        "description": "ckeditor.fields",
        "detail": "ckeditor.fields",
        "documentation": {}
    },
    {
        "label": "RichTextField",
        "importPath": "ckeditor.fields",
        "description": "ckeditor.fields",
        "isExtraImport": true,
        "detail": "ckeditor.fields",
        "documentation": {}
    },
    {
        "label": "RichTextField",
        "importPath": "ckeditor.fields",
        "description": "ckeditor.fields",
        "isExtraImport": true,
        "detail": "ckeditor.fields",
        "documentation": {}
    },
    {
        "label": "cloudinary_storage.storage",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cloudinary_storage.storage",
        "description": "cloudinary_storage.storage",
        "detail": "cloudinary_storage.storage",
        "documentation": {}
    },
    {
        "label": "django_resized.forms",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django_resized.forms",
        "description": "django_resized.forms",
        "detail": "django_resized.forms",
        "documentation": {}
    },
    {
        "label": "Library",
        "importPath": "django.template",
        "description": "django.template",
        "isExtraImport": true,
        "detail": "django.template",
        "documentation": {}
    },
    {
        "label": "CaptchaField",
        "importPath": "captcha.fields",
        "description": "captcha.fields",
        "isExtraImport": true,
        "detail": "captcha.fields",
        "documentation": {}
    },
    {
        "label": "ElementTree",
        "importPath": "xml.etree",
        "description": "xml.etree",
        "isExtraImport": true,
        "detail": "xml.etree",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "strip_tags",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "clean",
        "importPath": "bleach",
        "description": "bleach",
        "isExtraImport": true,
        "detail": "bleach",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.templatetags.static",
        "description": "django.templatetags.static",
        "isExtraImport": true,
        "detail": "django.templatetags.static",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.templatetags.static",
        "description": "django.templatetags.static",
        "isExtraImport": true,
        "detail": "django.templatetags.static",
        "documentation": {}
    },
    {
        "label": "ResizedImageField",
        "importPath": "django_resized",
        "description": "django_resized",
        "isExtraImport": true,
        "detail": "django_resized",
        "documentation": {}
    },
    {
        "label": "ResizedImageField",
        "importPath": "django_resized",
        "description": "django_resized",
        "isExtraImport": true,
        "detail": "django_resized",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "ReplyCreateForm",
        "importPath": "a_posts.forms",
        "description": "a_posts.forms",
        "isExtraImport": true,
        "detail": "a_posts.forms",
        "documentation": {}
    },
    {
        "label": "InboxNewMessageForm",
        "importPath": "a_inbox.forms",
        "description": "a_inbox.forms",
        "isExtraImport": true,
        "detail": "a_inbox.forms",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "a_core.asgi",
        "description": "a_core.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "a_core.asgi",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "env = Env()\nEnv.read_env()\nENVIRONMENT = env('ENVIRONMENT', default='production')\nimport django_heroku\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = env('SECRET_KEY')",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "ENVIRONMENT",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "ENVIRONMENT = env('ENVIRONMENT', default='production')\nimport django_heroku\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = env('SECRET_KEY')\nENCRYPT_KEY = env('ENCRYPT_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = env('SECRET_KEY')\nENCRYPT_KEY = env('ENCRYPT_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\nif ENVIRONMENT == 'production':    \n    DEBUG = True\nelse:",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "SECRET_KEY = env('SECRET_KEY')\nENCRYPT_KEY = env('ENCRYPT_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\nif ENVIRONMENT == 'production':    \n    DEBUG = True\nelse:\n    DEBUG = False\nALLOWED_HOSTS = ['*']\nINTERNAL_IPS = [\n    '127.0.0.1',",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "ENCRYPT_KEY",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "ENCRYPT_KEY = env('ENCRYPT_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\nif ENVIRONMENT == 'production':    \n    DEBUG = True\nelse:\n    DEBUG = False\nALLOWED_HOSTS = ['*']\nINTERNAL_IPS = [\n    '127.0.0.1',\n    'localhost:8000'",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\nINTERNAL_IPS = [\n    '127.0.0.1',\n    'localhost:8000'\n]\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "INTERNAL_IPS",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "INTERNAL_IPS = [\n    '127.0.0.1',\n    'localhost:8000'\n]\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'cloudinary',\n    'cloudinary_storage',\n    'django.contrib.sites',",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "SITE_ID",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "SITE_ID = 1\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'whitenoise.middleware.WhiteNoiseMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'allauth.account.middleware.AccountMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'whitenoise.middleware.WhiteNoiseMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'allauth.account.middleware.AccountMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "ROOT_URLCONF = 'a_core.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [ BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [ BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "WSGI_APPLICATION = 'a_core.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\nPOSTGRES_LOCALLY = False",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\nPOSTGRES_LOCALLY = False\nif ENVIRONMENT == 'production' or POSTGRES_LOCALLY == True:\n    DATABASES['default'] = dj_database_url.parse(env('DATABASE_URL'))\nCKEDIOR_CONFIGS = {",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "POSTGRES_LOCALLY",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "POSTGRES_LOCALLY = False\nif ENVIRONMENT == 'production' or POSTGRES_LOCALLY == True:\n    DATABASES['default'] = dj_database_url.parse(env('DATABASE_URL'))\nCKEDIOR_CONFIGS = {\n    'default': {\n        'toolbar': 'full',\n        'height': 300,\n    }\n}\nCKEDITOR_UPLOAD_PATH = 'content/ckeditor/'",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "CKEDIOR_CONFIGS",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "CKEDIOR_CONFIGS = {\n    'default': {\n        'toolbar': 'full',\n        'height': 300,\n    }\n}\nCKEDITOR_UPLOAD_PATH = 'content/ckeditor/'\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "CKEDITOR_UPLOAD_PATH",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "CKEDITOR_UPLOAD_PATH = 'content/ckeditor/'\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "AUTHENTICATION_BACKENDS",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "AUTHENTICATION_BACKENDS = [\n    'django.contrib.auth.backends.ModelBackend',\n    'allauth.account.auth_backends.AuthenticationBackend',\n]\n# Internationalization\n# https://docs.djangoproject.com/en/5.0/topics/i18n/\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\nRECAPTCHA_PUBLIC_KEY = 'http://127.0.0.1:8000/'\nRECAPTCHA_PRIVATE_KEY = 'http://127.0.0.1:8000/'\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static']",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\nRECAPTCHA_PUBLIC_KEY = 'http://127.0.0.1:8000/'\nRECAPTCHA_PRIVATE_KEY = 'http://127.0.0.1:8000/'\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\nSTATIC_ROOT = BASE_DIR / 'staticfiles'",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\nRECAPTCHA_PUBLIC_KEY = 'http://127.0.0.1:8000/'\nRECAPTCHA_PRIVATE_KEY = 'http://127.0.0.1:8000/'\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nMEDIA_URL = 'media/'",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "USE_TZ = True\nRECAPTCHA_PUBLIC_KEY = 'http://127.0.0.1:8000/'\nRECAPTCHA_PRIVATE_KEY = 'http://127.0.0.1:8000/'\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nMEDIA_URL = 'media/'\nif ENVIRONMENT == 'production' or POSTGRES_LOCALLY == True:",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "RECAPTCHA_PUBLIC_KEY",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "RECAPTCHA_PUBLIC_KEY = 'http://127.0.0.1:8000/'\nRECAPTCHA_PRIVATE_KEY = 'http://127.0.0.1:8000/'\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nMEDIA_URL = 'media/'\nif ENVIRONMENT == 'production' or POSTGRES_LOCALLY == True:\n    DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "RECAPTCHA_PRIVATE_KEY",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "RECAPTCHA_PRIVATE_KEY = 'http://127.0.0.1:8000/'\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nMEDIA_URL = 'media/'\nif ENVIRONMENT == 'production' or POSTGRES_LOCALLY == True:\n    DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'\nelse:",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nMEDIA_URL = 'media/'\nif ENVIRONMENT == 'production' or POSTGRES_LOCALLY == True:\n    DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'\nelse:\n    MEDIA_ROOT = BASE_DIR / 'media'\nCLOUDINARY_STORAGE = {\n    'CLOUD_NAME': env('CLOUD_NAME'),",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "STATICFILES_DIRS = [BASE_DIR / 'static']\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nMEDIA_URL = 'media/'\nif ENVIRONMENT == 'production' or POSTGRES_LOCALLY == True:\n    DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'\nelse:\n    MEDIA_ROOT = BASE_DIR / 'media'\nCLOUDINARY_STORAGE = {\n    'CLOUD_NAME': env('CLOUD_NAME'),\n    'API_KEY': env('CLOUD_API_KEY'),",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "STATIC_ROOT = BASE_DIR / 'staticfiles'\nMEDIA_URL = 'media/'\nif ENVIRONMENT == 'production' or POSTGRES_LOCALLY == True:\n    DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'\nelse:\n    MEDIA_ROOT = BASE_DIR / 'media'\nCLOUDINARY_STORAGE = {\n    'CLOUD_NAME': env('CLOUD_NAME'),\n    'API_KEY': env('CLOUD_API_KEY'),\n    'API_SECRET': env('CLOUD_API_SECRET'),",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "MEDIA_URL = 'media/'\nif ENVIRONMENT == 'production' or POSTGRES_LOCALLY == True:\n    DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'\nelse:\n    MEDIA_ROOT = BASE_DIR / 'media'\nCLOUDINARY_STORAGE = {\n    'CLOUD_NAME': env('CLOUD_NAME'),\n    'API_KEY': env('CLOUD_API_KEY'),\n    'API_SECRET': env('CLOUD_API_SECRET'),\n}",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "CLOUDINARY_STORAGE",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "CLOUDINARY_STORAGE = {\n    'CLOUD_NAME': env('CLOUD_NAME'),\n    'API_KEY': env('CLOUD_API_KEY'),\n    'API_SECRET': env('CLOUD_API_SECRET'),\n}\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGIN_REDIRECT_URL = '/'\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGIN_REDIRECT_URL = '/'\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_USERNAME_BLACKLIST = ['admin', 'accounts', 'profile', 'category', 'post', 'inbox', 'moder']\ndjango_heroku.settings(locals())",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_REDIRECT_URL",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "LOGIN_REDIRECT_URL = '/'\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_USERNAME_BLACKLIST = ['admin', 'accounts', 'profile', 'category', 'post', 'inbox', 'moder']\ndjango_heroku.settings(locals())",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_USERNAME_BLACKLIST = ['admin', 'accounts', 'profile', 'category', 'post', 'inbox', 'moder']\ndjango_heroku.settings(locals())",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_EMAIL_REQUIRED",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "ACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_USERNAME_BLACKLIST = ['admin', 'accounts', 'profile', 'category', 'post', 'inbox', 'moder']\ndjango_heroku.settings(locals())",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_USERNAME_BLACKLIST",
        "kind": 5,
        "importPath": "a_core.settings",
        "description": "a_core.settings",
        "peekOfCode": "ACCOUNT_USERNAME_BLACKLIST = ['admin', 'accounts', 'profile', 'category', 'post', 'inbox', 'moder']\ndjango_heroku.settings(locals())",
        "detail": "a_core.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "a_core.urls",
        "description": "a_core.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', include('admin_honeypot.urls', namespace='admin_honeypot')),\n    path('moder/', admin.site.urls),\n    path('captcha/', include('captcha.urls')),\n    path('accounts/', include('allauth.urls')),\n    path('', home_view, name='home'),\n    path('category/<tag>/', home_view, name='category'),\n    path('post/create/', post_create_view, name='post-create'),\n    path('post/delete/<pk>/', post_delete_view, name='post-delete'),\n    path('post/edit/<pk>/', post_edit_view, name='post-edit'),",
        "detail": "a_core.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "a_core.wsgi",
        "description": "a_core.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "a_core.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "a_inbox.migrations.0001_initial",
        "description": "a_inbox.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Conversation',\n            fields=[\n                ('id', models.CharField(default=uuid.uuid4, editable=False, max_length=100, primary_key=True, serialize=False, unique=True)),",
        "detail": "a_inbox.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "InboxMessageAdmin",
        "kind": 6,
        "importPath": "a_inbox.admin",
        "description": "a_inbox.admin",
        "peekOfCode": "class InboxMessageAdmin(admin.ModelAdmin):\n    readonly_fields = ('sender', 'conversation', 'body')\nadmin.site.register(InboxMessage, InboxMessageAdmin)\nadmin.site.register(Conversation)",
        "detail": "a_inbox.admin",
        "documentation": {}
    },
    {
        "label": "AInboxConfig",
        "kind": 6,
        "importPath": "a_inbox.apps",
        "description": "a_inbox.apps",
        "peekOfCode": "class AInboxConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'a_inbox'",
        "detail": "a_inbox.apps",
        "documentation": {}
    },
    {
        "label": "InboxNewMessageForm",
        "kind": 6,
        "importPath": "a_inbox.forms",
        "description": "a_inbox.forms",
        "peekOfCode": "class InboxNewMessageForm(ModelForm):\n    class Meta:\n        model = InboxMessage\n        fields = ['body']\n        labels = {\n            'body': '',\n        }\n        widgets = {\n            'body': forms.Textarea(attrs={'rows': 4, 'placeholder': 'Add message ...'})\n        }",
        "detail": "a_inbox.forms",
        "documentation": {}
    },
    {
        "label": "InboxMessage",
        "kind": 6,
        "importPath": "a_inbox.models",
        "description": "a_inbox.models",
        "peekOfCode": "class InboxMessage(models.Model):\n    sender = models.ForeignKey(User, on_delete=models.CASCADE, related_name='sent_messages')\n    conversation = models.ForeignKey('Conversation', on_delete=models.CASCADE, related_name='messages')\n    body = models.TextField()\n    created = models.DateTimeField(auto_now_add=True)\n    @property\n    def body_decrypted(self):\n        f = Fernet(settings.ENCRYPT_KEY)\n        message_decrypted = f.decrypt(self.body)\n        message_decoded = message_decrypted.decode('utf-8')",
        "detail": "a_inbox.models",
        "documentation": {}
    },
    {
        "label": "Conversation",
        "kind": 6,
        "importPath": "a_inbox.models",
        "description": "a_inbox.models",
        "peekOfCode": "class Conversation(models.Model):\n    id = models.CharField(max_length=100, default=uuid.uuid4, unique=True, primary_key=True, editable=False)\n    participants = models.ManyToManyField(User, related_name='conversations')\n    lastmessage_created = models.DateTimeField(default=timezone.now)\n    is_seen = models.BooleanField(default=False)\n    class Meta:\n        ordering = ['-lastmessage_created']\n    def __str__(self):\n        user_names = \", \".join(user.username for user in self.participants.all())\n        return f'[{user_names}]'",
        "detail": "a_inbox.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "a_inbox.urls",
        "description": "a_inbox.urls",
        "peekOfCode": "urlpatterns = [\n    path('', inbox_view, name='inbox'),\n    path('c/<conversation_id>/', inbox_view, name='inbox'),\n    path('search_users/', search_users, name='inbox-searchusers'),\n    path('new_message/<recipient_id>', new_message, name='inbox-newmessage'),\n    path('new_reply/<conversation_id>/', new_reply, name='inbox-newreply'),\n    path('notify/<conversation_id>/', notify_newmessage, name=\"notify-newmessage\"),\n    path('notify-inbox/', notify_inbox, name=\"notify-inbox\"),\n]",
        "detail": "a_inbox.urls",
        "documentation": {}
    },
    {
        "label": "inbox_view",
        "kind": 2,
        "importPath": "a_inbox.views",
        "description": "a_inbox.views",
        "peekOfCode": "def inbox_view(request, conversation_id=None):\n    my_conversations = Conversation.objects.filter(participants=request.user)\n    if conversation_id:\n        conversation = get_object_or_404(my_conversations, id=conversation_id)\n        latest_message = conversation.messages.first()\n        if conversation.is_seen == False and latest_message.sender != request.user:\n            conversation.is_seen = True\n            conversation.save()\n    else:\n        conversation = None",
        "detail": "a_inbox.views",
        "documentation": {}
    },
    {
        "label": "search_users",
        "kind": 2,
        "importPath": "a_inbox.views",
        "description": "a_inbox.views",
        "peekOfCode": "def search_users(request):\n    letters = request.GET.get('search_user')\n    if request.htmx:\n        if len(letters) > 0:\n            profiles = Profile.objects.filter(realname__icontains=letters).exclude(realname=request.user.profile.realname)\n            users_id = profiles.values_list('user', flat=True)\n            users = User.objects.filter(\n                Q(username__icontains=letters) | Q(id__in=users_id)\n            ).exclude(username=request.user.username)\n            return render(request, 'a_inbox/list_searchuser.html', {'users':users})",
        "detail": "a_inbox.views",
        "documentation": {}
    },
    {
        "label": "new_message",
        "kind": 2,
        "importPath": "a_inbox.views",
        "description": "a_inbox.views",
        "peekOfCode": "def new_message(request, recipient_id):\n    recipient = get_object_or_404( User, id=recipient_id )\n    new_message_form = InboxNewMessageForm()\n    if request.method == 'POST':\n        form = InboxNewMessageForm(request.POST)\n        if form.is_valid():\n            message = form.save(commit=False)\n            #encrypt\n            message_original = form.cleaned_data['body']\n            message_bytes = message_original.encode('utf-8')",
        "detail": "a_inbox.views",
        "documentation": {}
    },
    {
        "label": "new_reply",
        "kind": 2,
        "importPath": "a_inbox.views",
        "description": "a_inbox.views",
        "peekOfCode": "def new_reply(request, conversation_id):\n    new_message_form = InboxNewMessageForm()\n    my_conversations = request.user.conversations.all()\n    conversation = get_object_or_404(my_conversations, id=conversation_id)\n    if request.method == 'POST':\n        form = InboxNewMessageForm(request.POST)\n        if form.is_valid():\n            message = form.save(commit=False)\n            message_original = form.cleaned_data['body']\n            message_bytes = message_original.encode('utf-8')",
        "detail": "a_inbox.views",
        "documentation": {}
    },
    {
        "label": "notify_newmessage",
        "kind": 2,
        "importPath": "a_inbox.views",
        "description": "a_inbox.views",
        "peekOfCode": "def notify_newmessage(request, conversation_id):\n    conversation = get_object_or_404(Conversation, id=conversation_id)\n    latest_message = conversation.messages.first()\n    if conversation.is_seen == False and latest_message.sender != request.user:\n        return render(request, 'a_inbox/notify_icon.html')\n    else:\n        return HttpResponse('')\ndef notify_inbox(request):\n   my_conversations = Conversation.objects.filter(participants=request.user, is_seen=False) \n   for c in my_conversations:",
        "detail": "a_inbox.views",
        "documentation": {}
    },
    {
        "label": "notify_inbox",
        "kind": 2,
        "importPath": "a_inbox.views",
        "description": "a_inbox.views",
        "peekOfCode": "def notify_inbox(request):\n   my_conversations = Conversation.objects.filter(participants=request.user, is_seen=False) \n   for c in my_conversations:\n       latest_message = c.messages.first()\n       if latest_message.sender != request.user:\n           return render(request, 'a_inbox/notify_icon.html')\n       return HttpResponse('')",
        "detail": "a_inbox.views",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "a_inbox.views",
        "description": "a_inbox.views",
        "peekOfCode": "f = Fernet(settings.ENCRYPT_KEY)\n@login_required\ndef inbox_view(request, conversation_id=None):\n    my_conversations = Conversation.objects.filter(participants=request.user)\n    if conversation_id:\n        conversation = get_object_or_404(my_conversations, id=conversation_id)\n        latest_message = conversation.messages.first()\n        if conversation.is_seen == False and latest_message.sender != request.user:\n            conversation.is_seen = True\n            conversation.save()",
        "detail": "a_inbox.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "a_posts.migrations.0001_initial",
        "description": "a_posts.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Tag',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "a_posts.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "a_posts.migrations.0002_alter_post_text_likedpost_post_likes",
        "description": "a_posts.migrations.0002_alter_post_text_likedpost_post_likes",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('a_posts', '0001_initial'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='post',\n            name='text',\n            field=ckeditor.fields.RichTextField(verbose_name='Text Message'),",
        "detail": "a_posts.migrations.0002_alter_post_text_likedpost_post_likes",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "a_posts.migrations.0003_likedcomment_comment_likes",
        "description": "a_posts.migrations.0003_likedcomment_comment_likes",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('a_posts', '0002_alter_post_text_likedpost_post_likes'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='LikedComment',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "a_posts.migrations.0003_likedcomment_comment_likes",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "a_posts.migrations.0004_likedreply_reply_likes",
        "description": "a_posts.migrations.0004_likedreply_reply_likes",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('a_posts', '0003_likedcomment_comment_likes'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='LikedReply',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "a_posts.migrations.0004_likedreply_reply_likes",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "a_posts.migrations.0005_reply_parent_reply_alter_reply_parent_comment",
        "description": "a_posts.migrations.0005_reply_parent_reply_alter_reply_parent_comment",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('a_posts', '0004_likedreply_reply_likes'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='reply',\n            name='parent_reply',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='a_posts.reply'),\n        ),",
        "detail": "a_posts.migrations.0005_reply_parent_reply_alter_reply_parent_comment",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "a_posts.migrations.0006_reply_level",
        "description": "a_posts.migrations.0006_reply_level",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('a_posts', '0005_reply_parent_reply_alter_reply_parent_comment'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='reply',\n            name='level',\n            field=models.IntegerField(default=1),\n        ),",
        "detail": "a_posts.migrations.0006_reply_level",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "a_posts.migrations.0007_alter_post_photo_field",
        "description": "a_posts.migrations.0007_alter_post_photo_field",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('a_posts', '0006_reply_level'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='post',\n            name='photo_field',\n            field=models.ImageField(blank=True, null=True, storage=cloudinary_storage.storage.MediaCloudinaryStorage(), upload_to='images/'),\n        ),",
        "detail": "a_posts.migrations.0007_alter_post_photo_field",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "a_posts.migrations.0008_alter_post_photo_field",
        "description": "a_posts.migrations.0008_alter_post_photo_field",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('a_posts', '0007_alter_post_photo_field'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='post',\n            name='photo_field',\n            field=models.FileField(blank=True, null=True, storage=cloudinary_storage.storage.MediaCloudinaryStorage(), upload_to='images/'),\n        ),",
        "detail": "a_posts.migrations.0008_alter_post_photo_field",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "a_posts.migrations.0009_alter_post_photo_field",
        "description": "a_posts.migrations.0009_alter_post_photo_field",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('a_posts', '0008_alter_post_photo_field'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='post',\n            name='photo_field',\n            field=models.ImageField(blank=True, null=True, upload_to='images/'),\n        ),",
        "detail": "a_posts.migrations.0009_alter_post_photo_field",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "a_posts.migrations.0010_alter_post_photo_field",
        "description": "a_posts.migrations.0010_alter_post_photo_field",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('a_posts', '0009_alter_post_photo_field'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='post',\n            name='photo_field',\n            field=django_resized.forms.ResizedImageField(blank=True, crop=None, force_format=None, keep_meta=True, null=True, quality=85, scale=None, size=[320, 240], upload_to='images/'),\n        ),",
        "detail": "a_posts.migrations.0010_alter_post_photo_field",
        "documentation": {}
    },
    {
        "label": "sidebar_view",
        "kind": 2,
        "importPath": "a_posts.templatetags.sidebar",
        "description": "a_posts.templatetags.sidebar",
        "peekOfCode": "def sidebar_view(tag=None, user=None):\n    categories = Tag.objects.all()\n    top_posts = Post.objects.annotate(num_likes=Count('likes')).filter(num_likes__gt=0).order_by('-num_likes')\n    top_comments = Comment.objects.annotate(num_likes=Count('likes')).filter(num_likes__gt=0).order_by('-num_likes')\n    context = {\n        'categories': categories,\n        'tag': tag,\n        'top_posts': top_posts,\n        'top_comments': top_comments,\n        'user': user",
        "detail": "a_posts.templatetags.sidebar",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "a_posts.templatetags.sidebar",
        "description": "a_posts.templatetags.sidebar",
        "peekOfCode": "register = Library()\n@register.inclusion_tag('includes/sidebar.html')\ndef sidebar_view(tag=None, user=None):\n    categories = Tag.objects.all()\n    top_posts = Post.objects.annotate(num_likes=Count('likes')).filter(num_likes__gt=0).order_by('-num_likes')\n    top_comments = Comment.objects.annotate(num_likes=Count('likes')).filter(num_likes__gt=0).order_by('-num_likes')\n    context = {\n        'categories': categories,\n        'tag': tag,\n        'top_posts': top_posts,",
        "detail": "a_posts.templatetags.sidebar",
        "documentation": {}
    },
    {
        "label": "APostsConfig",
        "kind": 6,
        "importPath": "a_posts.apps",
        "description": "a_posts.apps",
        "peekOfCode": "class APostsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'a_posts'",
        "detail": "a_posts.apps",
        "documentation": {}
    },
    {
        "label": "PostCreateForm",
        "kind": 6,
        "importPath": "a_posts.forms",
        "description": "a_posts.forms",
        "peekOfCode": "class PostCreateForm(ModelForm):\n    captcha = CaptchaField()\n    paragragh=RichTextField()\n    italic = RichTextField()\n    link = RichTextField()\n    strong = RichTextField()\n    class Meta:\n        model = Post\n        fields = [ 'title', 'text', 'email', 'text_file', 'body', 'author', 'tags',  'photo_field']\n        labels = {",
        "detail": "a_posts.forms",
        "documentation": {}
    },
    {
        "label": "PostEditForm",
        "kind": 6,
        "importPath": "a_posts.forms",
        "description": "a_posts.forms",
        "peekOfCode": "class PostEditForm(ModelForm):\n    class Meta:\n        model = Post\n        fields = ['body', 'tags']\n        labels = {\n            'body': '',\n            'tags': 'Category'\n        }\n        widgets = {\n            'body': forms.Textarea(attrs={'rows': 3,",
        "detail": "a_posts.forms",
        "documentation": {}
    },
    {
        "label": "CommentCreateForm",
        "kind": 6,
        "importPath": "a_posts.forms",
        "description": "a_posts.forms",
        "peekOfCode": "class CommentCreateForm(ModelForm):\n    class Meta:\n        model = Comment\n        fields = ['body']\n        widgets = {\n            'body': forms.TextInput(attrs={'placeholder': 'Add comment...'})\n        }\n        labels = {\n            'body': ''\n        }",
        "detail": "a_posts.forms",
        "documentation": {}
    },
    {
        "label": "ReplyCreateForm",
        "kind": 6,
        "importPath": "a_posts.forms",
        "description": "a_posts.forms",
        "peekOfCode": "class ReplyCreateForm(ModelForm):\n    class Meta:\n        model = Reply\n        fields = ['body']\n        widgets = {\n            'body' : forms.TextInput(attrs={'placeholder': 'Add reply ...', 'class': \"!text-sm\"})\n        }\n        labels = {\n            'body': ''\n        }",
        "detail": "a_posts.forms",
        "documentation": {}
    },
    {
        "label": "NestedReplyCreateForm",
        "kind": 6,
        "importPath": "a_posts.forms",
        "description": "a_posts.forms",
        "peekOfCode": "class NestedReplyCreateForm(ModelForm):\n    class Meta:\n        model = Reply\n        fields = ['body']\n        widgets = {\n            'body' : forms.TextInput(attrs={'autofocus': True, 'class': \"!text-sm bg-gray-200 !p-0 !pl-2 !h-8\"})\n        }\n        labels = {\n            'body': ''\n        }",
        "detail": "a_posts.forms",
        "documentation": {}
    },
    {
        "label": "ValidXHTMLTextField",
        "kind": 6,
        "importPath": "a_posts.models",
        "description": "a_posts.models",
        "peekOfCode": "class ValidXHTMLTextField(models.TextField):\n    def validate_xhtml(self, value):\n        try:\n            stripped_value = strip_tags_except_allowed(value, allowed_tags=['a', 'code', 'i', 'strong'])\n            if stripped_value != value:\n                raise ValidationError('Недопустимые HTML теги.')\n            # Проверка на валидность XHTML\n            ElementTree.fromstring(f'<root>{value}</root>')\n        except ElementTree.ParseError:\n            raise ValidationError('Неверный формат XHTML.')",
        "detail": "a_posts.models",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "a_posts.models",
        "description": "a_posts.models",
        "peekOfCode": "class Post(models.Model):\n    title = models.CharField(max_length=500)\n    artist = models.CharField(max_length=500, null=True)\n    # url = models.URLField(max_length=500, null=True, blank=True)\n    # image = models.URLField(max_length=500, null=True, blank=True)\n    photo_field = ResizedImageField(size=[320, 240], quality=85, upload_to='images/', null=True, blank=True)\n    author = models.ForeignKey(User, on_delete=models.SET_NULL , null=True, related_name='posts')\n    body = models.TextField()\n    tags = models.ManyToManyField('Tag')\n    text_file = models.FileField(upload_to='files/', null=True, blank=True)",
        "detail": "a_posts.models",
        "documentation": {}
    },
    {
        "label": "LikedPost",
        "kind": 6,
        "importPath": "a_posts.models",
        "description": "a_posts.models",
        "peekOfCode": "class LikedPost(models.Model):\n    post = models.ForeignKey(Post, on_delete=models.CASCADE)    \n    user = models.ForeignKey(User, on_delete=models.CASCADE)    \n    created = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f'{self.user.username} : {self.post.title}'\nclass Tag(models.Model):\n    name = models.CharField(max_length=20)\n    image = models.FileField(upload_to='icons/', null=True, blank=True)\n    slug = models.SlugField(max_length=20, unique=True)",
        "detail": "a_posts.models",
        "documentation": {}
    },
    {
        "label": "Tag",
        "kind": 6,
        "importPath": "a_posts.models",
        "description": "a_posts.models",
        "peekOfCode": "class Tag(models.Model):\n    name = models.CharField(max_length=20)\n    image = models.FileField(upload_to='icons/', null=True, blank=True)\n    slug = models.SlugField(max_length=20, unique=True)\n    order = models.IntegerField(null=True)\n    def __str__(self):\n        return self.name \n    class Meta:\n        ordering = ['order']\nclass Comment(models.Model):",
        "detail": "a_posts.models",
        "documentation": {}
    },
    {
        "label": "Comment",
        "kind": 6,
        "importPath": "a_posts.models",
        "description": "a_posts.models",
        "peekOfCode": "class Comment(models.Model):\n    author = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name='comments')\n    parent_post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name='comments')\n    body = models.CharField(max_length=150)\n    likes = models.ManyToManyField(User, related_name='likedcomments', through='LikedComment')\n    created = models.DateTimeField(auto_now_add=True)\n    id = models.CharField(max_length=100, default=uuid.uuid4, unique=True, primary_key = True, editable=False)\n    def __str__(self):\n        try:\n            return f'{self.author.username} : {self.body[:30]}' ",
        "detail": "a_posts.models",
        "documentation": {}
    },
    {
        "label": "LikedComment",
        "kind": 6,
        "importPath": "a_posts.models",
        "description": "a_posts.models",
        "peekOfCode": "class LikedComment(models.Model):\n    comment = models.ForeignKey(Comment, on_delete=models.CASCADE)    \n    user = models.ForeignKey(User, on_delete=models.CASCADE)    \n    created = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f'{self.user.username} : {self.comment.body[:30]}'\nclass Reply(models.Model):\n    author = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name=\"replies\")\n    parent_comment = models.ForeignKey(Comment, on_delete=models.CASCADE, related_name=\"replies\", null=True, blank=True)\n    parent_reply = models.ForeignKey('Reply', on_delete=models.CASCADE, related_name=\"replies\", null=True, blank=True)",
        "detail": "a_posts.models",
        "documentation": {}
    },
    {
        "label": "Reply",
        "kind": 6,
        "importPath": "a_posts.models",
        "description": "a_posts.models",
        "peekOfCode": "class Reply(models.Model):\n    author = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name=\"replies\")\n    parent_comment = models.ForeignKey(Comment, on_delete=models.CASCADE, related_name=\"replies\", null=True, blank=True)\n    parent_reply = models.ForeignKey('Reply', on_delete=models.CASCADE, related_name=\"replies\", null=True, blank=True)\n    level = models.IntegerField(default=1)\n    body = models.CharField(max_length=150)\n    likes = models.ManyToManyField(User, related_name='likedreplies', through='LikedReply')\n    created = models.DateTimeField(auto_now_add=True)\n    id = models.CharField(max_length=100, default=uuid.uuid4, unique=True, primary_key = True, editable=False)\n    def __str__(self):",
        "detail": "a_posts.models",
        "documentation": {}
    },
    {
        "label": "LikedReply",
        "kind": 6,
        "importPath": "a_posts.models",
        "description": "a_posts.models",
        "peekOfCode": "class LikedReply(models.Model):\n    reply = models.ForeignKey(Reply, on_delete=models.CASCADE)    \n    user = models.ForeignKey(User, on_delete=models.CASCADE)    \n    created = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f'{self.user.username} : {self.reply.body[:30]}'",
        "detail": "a_posts.models",
        "documentation": {}
    },
    {
        "label": "strip_tags_except_allowed",
        "kind": 2,
        "importPath": "a_posts.models",
        "description": "a_posts.models",
        "peekOfCode": "def strip_tags_except_allowed(value, allowed_tags):\n    \"\"\"\n    Strip HTML tags from the given value, except for the allowed_tags.\n    \"\"\"\n    return clean(value, tags=allowed_tags, strip=True)\nclass ValidXHTMLTextField(models.TextField):\n    def validate_xhtml(self, value):\n        try:\n            stripped_value = strip_tags_except_allowed(value, allowed_tags=['a', 'code', 'i', 'strong'])\n            if stripped_value != value:",
        "detail": "a_posts.models",
        "documentation": {}
    },
    {
        "label": "home_view",
        "kind": 2,
        "importPath": "a_posts.views",
        "description": "a_posts.views",
        "peekOfCode": "def home_view(request, tag=None):\n    title = 'Test Blog Comments'\n    if tag:\n        posts = Post.objects.filter(tags__slug=tag)\n        tag = get_object_or_404(Tag, slug=tag)\n    else:\n        posts = Post.objects.all()\n    paginator = Paginator(posts, 3)\n    page = int(request.GET.get('page', 1))\n    try:",
        "detail": "a_posts.views",
        "documentation": {}
    },
    {
        "label": "post_create_view",
        "kind": 2,
        "importPath": "a_posts.views",
        "description": "a_posts.views",
        "peekOfCode": "def post_create_view(request):\n    form = PostCreateForm()\n    if request.method == 'POST':\n        form = PostCreateForm(request.POST, request.FILES)\n        if form.is_valid():\n            post = form.save(commit=False)\n            # website = requests.get(form.data['body'])\n            # print(website.text)\n            # sourcecode = BeautifulSoup(website.text, 'html.parser')\n            # find_image = sourcecode.select('meta[content^=\"https://live.staticflickr.com/\"]')",
        "detail": "a_posts.views",
        "documentation": {}
    },
    {
        "label": "post_delete_view",
        "kind": 2,
        "importPath": "a_posts.views",
        "description": "a_posts.views",
        "peekOfCode": "def post_delete_view(request, pk):\n    post = get_object_or_404(Post, id=pk, author=request.user)\n    if request.method == 'POST':\n        post.delete()\n        messages.success(request, 'Post deleted')\n        return redirect('home')\n    return render(request, 'a_posts/post_delete.html', {'post': post})\n@login_required\ndef post_edit_view(request, pk):\n    post = get_object_or_404(Post, id=pk, author=request.user)",
        "detail": "a_posts.views",
        "documentation": {}
    },
    {
        "label": "post_edit_view",
        "kind": 2,
        "importPath": "a_posts.views",
        "description": "a_posts.views",
        "peekOfCode": "def post_edit_view(request, pk):\n    post = get_object_or_404(Post, id=pk, author=request.user)\n    form = PostEditForm(instance=post)\n    if request.method == 'POST':\n        form = PostEditForm(request.POST, instance=post)\n        if form.is_valid:\n            form.save()\n            messages.success(request, 'Post updated')\n            return redirect('home')\n    context = {",
        "detail": "a_posts.views",
        "documentation": {}
    },
    {
        "label": "post_page_view",
        "kind": 2,
        "importPath": "a_posts.views",
        "description": "a_posts.views",
        "peekOfCode": "def post_page_view(request, pk):\n    post = get_object_or_404(Post, id=pk)\n    commentform = CommentCreateForm()\n    replyform = ReplyCreateForm()\n    categories = Tag.objects.all()\n    if request.htmx:\n        if 'top' in request.GET:\n            # comments = post.comments.filter(likes__isnull=False).distinct()\n            comments = post.comments.annotate(num_likes=Count('likes')).filter(num_likes__gt=0).order_by('-num_likes')\n        else:",
        "detail": "a_posts.views",
        "documentation": {}
    },
    {
        "label": "comment_sent",
        "kind": 2,
        "importPath": "a_posts.views",
        "description": "a_posts.views",
        "peekOfCode": "def comment_sent(request, pk):\n    post = get_object_or_404(Post, id=pk)\n    replyform = ReplyCreateForm()\n    if request.method == 'POST':\n        form = CommentCreateForm(request.POST)\n        if form.is_valid:\n            comment = form.save(commit=False)\n            comment.author = request.user\n            comment.parent_post = post\n            comment.save()",
        "detail": "a_posts.views",
        "documentation": {}
    },
    {
        "label": "reply_sent",
        "kind": 2,
        "importPath": "a_posts.views",
        "description": "a_posts.views",
        "peekOfCode": "def reply_sent(request, pk):\n    comment = get_object_or_404(Comment, id=pk)\n    replyform = ReplyCreateForm()\n    if request.method == 'POST':\n        form = ReplyCreateForm(request.POST)\n        if form.is_valid:\n            reply = form.save(commit=False)\n            reply.author = request.user\n            reply.parent_comment = comment\n            reply.save()",
        "detail": "a_posts.views",
        "documentation": {}
    },
    {
        "label": "reply_form",
        "kind": 2,
        "importPath": "a_posts.views",
        "description": "a_posts.views",
        "peekOfCode": "def reply_form(request, pk):\n    reply = get_object_or_404(Reply, id=pk)\n    replyform = NestedReplyCreateForm()\n    if request.method == 'POST':\n        form = NestedReplyCreateForm(request.POST)\n        if form.is_valid:\n            reply_nested = form.save(commit=False)\n            reply_nested.author = request.user\n            reply_nested.parent_reply = reply\n            reply_nested.level = reply.level + 1",
        "detail": "a_posts.views",
        "documentation": {}
    },
    {
        "label": "comment_delete_view",
        "kind": 2,
        "importPath": "a_posts.views",
        "description": "a_posts.views",
        "peekOfCode": "def comment_delete_view(request, pk):\n    post = get_object_or_404(Comment, id=pk, author=request.user)\n    if request.method == 'POST':\n        post.delete()\n        messages.success(request, 'Comment deleted')\n        return redirect('post', post.parent_post.id)\n    return render(request, 'a_posts/comment_delete.html', {'comment': post})\n@login_required\ndef reply_delete_view(request, pk):\n    reply = get_object_or_404(Reply, id=pk, author=request.user)",
        "detail": "a_posts.views",
        "documentation": {}
    },
    {
        "label": "reply_delete_view",
        "kind": 2,
        "importPath": "a_posts.views",
        "description": "a_posts.views",
        "peekOfCode": "def reply_delete_view(request, pk):\n    reply = get_object_or_404(Reply, id=pk, author=request.user)\n    reply.delete()\n    return HttpResponse('')\ndef like_toggle(model):\n    def inner_func(func):\n        def wrapper(request, *args, **kwargs):\n            post = get_object_or_404(model, id=kwargs.get('pk'))\n            user_exist = post.likes.filter(username=request.user.username).exists()\n            if post.author != request.user:",
        "detail": "a_posts.views",
        "documentation": {}
    },
    {
        "label": "like_toggle",
        "kind": 2,
        "importPath": "a_posts.views",
        "description": "a_posts.views",
        "peekOfCode": "def like_toggle(model):\n    def inner_func(func):\n        def wrapper(request, *args, **kwargs):\n            post = get_object_or_404(model, id=kwargs.get('pk'))\n            user_exist = post.likes.filter(username=request.user.username).exists()\n            if post.author != request.user:\n                if user_exist:\n                    post.likes.remove(request.user)\n                else:\n                    post.likes.add(request.user)",
        "detail": "a_posts.views",
        "documentation": {}
    },
    {
        "label": "like_post",
        "kind": 2,
        "importPath": "a_posts.views",
        "description": "a_posts.views",
        "peekOfCode": "def like_post(request, post):\n    return render(request, 'snippets/likes.html', {'post': post})\n@login_required\n@like_toggle(Comment)\ndef like_comment(request, post):\n    return render(request, 'snippets/likes_comment.html', {'comment': post})\n@login_required\n@like_toggle(Reply)\ndef like_reply(request, post):\n    return render(request, 'snippets/likes_reply.html', {'reply': post})",
        "detail": "a_posts.views",
        "documentation": {}
    },
    {
        "label": "like_comment",
        "kind": 2,
        "importPath": "a_posts.views",
        "description": "a_posts.views",
        "peekOfCode": "def like_comment(request, post):\n    return render(request, 'snippets/likes_comment.html', {'comment': post})\n@login_required\n@like_toggle(Reply)\ndef like_reply(request, post):\n    return render(request, 'snippets/likes_reply.html', {'reply': post})",
        "detail": "a_posts.views",
        "documentation": {}
    },
    {
        "label": "like_reply",
        "kind": 2,
        "importPath": "a_posts.views",
        "description": "a_posts.views",
        "peekOfCode": "def like_reply(request, post):\n    return render(request, 'snippets/likes_reply.html', {'reply': post})",
        "detail": "a_posts.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "a_users.migrations.0001_initial",
        "description": "a_users.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Profile',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "a_users.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "a_users.migrations.0002_alter_profile_image",
        "description": "a_users.migrations.0002_alter_profile_image",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('a_users', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='profile',\n            name='image',\n            field=django_resized.forms.ResizedImageField(blank=True, crop=None, force_format=None, keep_meta=True, null=True, quality=85, scale=None, size=[600, 600], upload_to='avatars/'),\n        ),",
        "detail": "a_users.migrations.0002_alter_profile_image",
        "documentation": {}
    },
    {
        "label": "AUsersConfig",
        "kind": 6,
        "importPath": "a_users.apps",
        "description": "a_users.apps",
        "peekOfCode": "class AUsersConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'a_users'\n    def ready(self):\n        import a_users.signals",
        "detail": "a_users.apps",
        "documentation": {}
    },
    {
        "label": "ProfileForm",
        "kind": 6,
        "importPath": "a_users.forms",
        "description": "a_users.forms",
        "peekOfCode": "class ProfileForm(ModelForm):\n    class Meta:\n        model = Profile\n        exclude =['user']\n        labels = {\n            'realname': 'Name'\n        }\n        widgets = {\n            'image': forms.FileInput(),\n        }",
        "detail": "a_users.forms",
        "documentation": {}
    },
    {
        "label": "Profile",
        "kind": 6,
        "importPath": "a_users.models",
        "description": "a_users.models",
        "peekOfCode": "class Profile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    image = ResizedImageField(size=[600, 600], quality=85, upload_to='avatars/', null=True, blank=True) \n    realname = models.CharField(max_length=20, null=True, blank=True)\n    email = models.EmailField(unique=True, null=True)\n    location = models.CharField(max_length=20, null=True, blank=True)\n    bio = models.TextField(null=True, blank=True) \n    created = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return str(self.user)",
        "detail": "a_users.models",
        "documentation": {}
    },
    {
        "label": "create_profile",
        "kind": 2,
        "importPath": "a_users.signals",
        "description": "a_users.signals",
        "peekOfCode": "def create_profile(sender, instance, created, **kwargs):\n        user = instance\n        if created:\n            Profile.objects.create(\n                user = user,\n                email = user.email,\n            )\n        else:\n            profile = get_object_or_404(Profile, user=user)\n            profile.email = user.email",
        "detail": "a_users.signals",
        "documentation": {}
    },
    {
        "label": "update_user",
        "kind": 2,
        "importPath": "a_users.signals",
        "description": "a_users.signals",
        "peekOfCode": "def update_user(sender, instance, created, **kwargs):\n    profile = instance\n    if created == False:\n        user = get_object_or_404(User, id=profile.user.id)\n        if user.email != profile.email:\n            user.email = profile.email\n            user.save()",
        "detail": "a_users.signals",
        "documentation": {}
    },
    {
        "label": "profile_view",
        "kind": 2,
        "importPath": "a_users.views",
        "description": "a_users.views",
        "peekOfCode": "def profile_view(request, username=None):\n    if username:\n        profile = get_object_or_404(User, username=username).profile\n    else:\n        try:\n            profile = request.user.profile\n        except:\n            raise Http404()\n    posts = profile.user.posts.all()\n    if request.htmx:",
        "detail": "a_users.views",
        "documentation": {}
    },
    {
        "label": "profile_edit_view",
        "kind": 2,
        "importPath": "a_users.views",
        "description": "a_users.views",
        "peekOfCode": "def profile_edit_view(request):\n    form = ProfileForm(instance=request.user.profile)\n    if request.method == 'POST':\n        form = ProfileForm(request.POST, \n                           request.FILES,\n                           instance=request.user.profile)\n        if form.is_valid():\n            form.save()\n            return redirect('profile')\n    if request.path == reverse('profile-onboarding'):",
        "detail": "a_users.views",
        "documentation": {}
    },
    {
        "label": "profile_delete_view",
        "kind": 2,
        "importPath": "a_users.views",
        "description": "a_users.views",
        "peekOfCode": "def profile_delete_view(request):\n    user = request.user\n    if request.method == 'POST':\n        logout(request)\n        user.delete()\n        messages.success(request, 'Account deleted, what a pity')\n        return redirect('home')\n    return render(request, 'a_users/profile_delete.html')",
        "detail": "a_users.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'a_core.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]